#!/bin/bash

#~# A collection of functions used in the Docker build & run scripts

bold=$(tput bold)
normal=$(tput sgr0)
#Usage: echo -e "\n${bold}### Text to print bold ###${normal}"



#~# Function to check we have one parameter passed to the function
#~# TODO change this to a generic function to check any number of parameters
function chk_params_1 ()
{
    if [[ -z $1 ]]
        then
            echo -e "\n*** Coding error - Incorrect or no parameters supplied - can't continue ***\n"
            exit
    fi
}

#~# Function to check we have two parameters passed to the function
#~# TODO change this to a generic function to check any number of parameters
function chk_params_2 ()
{
    if [[ -z $1 ]] || [[ -z $2 ]]
        then
            echo -e "\n*** Coding error - Incorrect or no parameters supplied - can't continue ***\n"
            exit
    fi
}

#~# Function to check for the existence of a VERSION file and obtain the valid VER number
function chk_get_ver ()
{
    if [ -s VERSION ] && [ "$(egrep '^v[0-9]\.[0-9]' VERSION)" ]
        then
            VER="$(egrep '^v[0-9].[0-9]' VERSION)"
        else
            echo -e "\n*** ERROR: No VERSION No. and/or VERSION file exists ***"
            echo -e "\nPlease create a file called VERSION in the same directory as the Dockerfile"
            echo -e "\nAnd add the version number to the file in the format vn.n"
            echo -e "\nwhere n.n is the major and minor version numbers E.G. v1.6\n\n"
            exit
    fi
}

#~# Function to check that the supplied VER number is unique
function unique_ver ()
{
    #    if [ $(docker inspect --format {{.RepoTags}} $1:$2 2>/dev/null | sed 's/]//g'|cut -d ":" -f 2) ] ## DOCKER 1.9 ONLY!!
    # $1 in the image name ${INAME}
    # $2 is the VERsion ${VER}
    # Check we have at least two parameters
    chk_params_2 ${1} ${2}

    if [[ $( docker images | egrep $1 | awk '{ print $2; }' ) ]]
       then
           echo -e "\n Parameters: ${1} ${2}\n"
           ver_array=$(docker images | egrep $1 | awk '{ print $2; }')

           for new_ver in ${ver_array[@]}; do
               echo ${new_var}
               if [[ $new_ver == $2 ]]
                   then
                       echo -e "\n*** ${new_ver} already exists ***"
                       echo -e "\nAmend the version number in the VERSION file using the format vn.n"
                       echo -e "\nwhere n.n is the major and minor version numbers E.G. v1.6\n\n"
                       exit
               fi
           done
       else
           echo -e "\n*** This will be a new version: $1:$2  ***\n"
    fi
}

#~# Stop a running container
# This is used for rapid testing of new images
function stop_container ()
{
    # $1 is the container name ${CNAME}
    # Check we have at least one parameter
    chk_params_1 ${1}

    if [[ $(docker ps -f name="${1}" --format "{{.ID}}") ]] ;
        then
            echo -e "\n*** Stopping old ${1} ***\n"
            docker stop $(docker ps -f name="${1}" --format "{{.ID}}") ;
        else
            echo "No container to stop" ;
    fi
}

#~# Remove old container
#~# TODO : Need to ask user if they really mean this
function rm_container ()
{
    # $1 is the container name ${CNAME}
    # Check we have at least one parameter
    chk_params_1 ${1}

    if [[ $(docker ps -a -f name="${1}" --format "{{.ID}}") ]] ;
        then
            echo -e "\n*** Removing old ${1} ***\n"
            docker rm $(docker ps -a -f name="${1}" --format "{{.ID}}") ;
        else
            echo "No container to remove" ;
    fi
}

#~# Publish container build instructions
function con_build_ins ()
{
    # $1 in the image name ${INAME}
    # $2 is the VERsion ${VER}
    # Check we have at least two parameters
    chk_params_2 ${1} ${2} ${3}

    echo -e "\nTo check operation, create container using:"
    echo -e "\n    docker run -dit -P --name=${3} --hostname=${3} ${1}:${2} bash"
    echo -e "\nAnd then exec into the container using:"
    echo -e "\n    docker exec -it ${3} bash\n"
}

#~# Publish additional usage instructions
function con_use_ins ()
{
    echo -e "\nTo get the port that the container is listening on run:"
    echo -e "\n    docker ps"
    echo -e "\nExample output:"
    echo -e "\nCONTAINER ID  IMAGE              COMMAND             CREATED        STATUS         PORTS                   NAMES"
    echo -e "\n8c82a9287b23  qmul/ssh:centos6   /usr/sbin/sshd -D   4 seconds ago  Up 2 seconds   0.0.0.0:49154->22/tcp   mad_mccarthy\n\n"
}

