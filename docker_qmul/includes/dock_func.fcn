#!/bin/bash

#~# A collection of functions used in the Docker build & run scripts

bold=$(tput bold)
normal=$(tput sgr0)
#Usage: echo -e "\n${bold}### Text to print bold ###${normal}"

#~# Set Standard directories
INC_LOCAL="./includes"
VER_FILE="${INC_LOCAL}/LABELS"
IMG_FILE="${INC_LOCAL}/IMAGENAME"

#~# Function to check we have the correct No. of parameters passed to the function
function chk_params ()
{
    for i in {1..${1}}; do
        if [[ -z ${2} ]]; then
            echo -e "\n${bold}*** Coding error - Incorrect or no parameters supplied - can't continue ***${normal}\n"
            exit
        fi
    done
}

#~# Function to check we have two parameters passed to the function
#~# TODO change this to a generic function to check any number of parameters
function chk_params_2 ()
{
    if [[ -z $1 ]] || [[ -z $2 ]]
        then
            echo -e "\n*** Coding error - Incorrect or no parameters supplied - can't continue ***\n"
            exit
    fi
}

#~# Read in parameters from a configuration file $1 in the ./includes directory
function read_params ()
{
    # Check we have at least one parameter
    chk_params 1 ${1}

    while IFS='' read -r LINE || [[ -n "$LINE" ]]; do
        RUN_OPTS="${RUN_OPTS} ${LINE}"
    done < ${INC_LOCAL}/$1
}

#~# Read in the image name from IMAGENAME file
function read_img_name ()
{
    while IFS='' read -r LINE || [[ -n "$LINE" ]]; do
        INAME=$( echo ${LINE}|cut -d "\"" -f 2 )
    done < ${IMG_FILE}
}

#~# Function to check for the existence of a VERSION file and obtain the valid VER number
function chk_get_ver ()
{
    if [[ ! -s ${VER_FILE} ]]
        then
            chk_get_ver_err_msg
            exit
    fi
    while IFS='' read -r LINE || [[ -n "$LINE" ]]; do
        if [[ $( echo ${LINE} | egrep "label Version" ) ]]
            then
                VER=$( echo ${LINE}|cut -d "\"" -f 2 )
        fi
    done < ${VER_FILE}

    if [[ -z ${VER} ]]
        then
            chk_get_ver_err_msg
            exit
    fi
}

#~# Error msg for function chk_get_ver
function chk_get_ver_err_msg ()
{
    echo -e "\n${bold}*** ERROR: No VERSION No. or no ${VER_FILE} file exists ***${normal}"
    echo -e "\nPlease create a file called ${VER_FILE} in the same directory as the Dockerfile"
    echo -e "\nAnd add the version number to the file in the format ${bold}--label Version=\"vnnnn\"${normal}"
    echo -e "\nIncrement the version to the next number.\n"
    echo -e "\nE.G. ${bold}--label Version="v0104"${normal} becomes ${bold}--label Version="v0105"${normal}\n\n"
}

#~# Function to check that the supplied VER number is unique
function unique_ver ()
{
    #    if [ $(docker inspect --format {{.RepoTags}} $1:$2 2>/dev/null | sed 's/]//g'|cut -d ":" -f 2) ] ## from DOCKER 1.9 ONLY
    # $1 is the image name ${INAME}
    # $2 is the VERsion ${VER}
    # Check we have at least two parameters
    chk_params_2 ${1} ${2}

    if [[ $( docker images | egrep $1 | awk '{ print $2; }' ) ]]
       then
           echo -e "\n Parameters: ${1} ${2}\n"
           # Get all versions of INAME image
           # The space after ${1} is required to prevent picking supersets of the name
           VER_ARRAY=$(docker images | egrep "${1} " | awk '{ print $2; }')

           # Check if the version already exists
           for NEW_VAR in ${VER_ARRAY[@]}; do
               # echo -e "\nNew Var: ${NEW_VAR} : ${2}"
               if [[ ${NEW_VAR} == $2 ]]
                   then
                       echo -e "\n${bold}*** ${NEW_VAR} already exists ***${normal}\n"
                       read -p "Do you want to increment the version number? [y|yes], [q|quit]: " INPUT
                       case ${INPUT} in
                           y|yes)     # Auto increment the version No. and check the new ver doesn't exist
                               auto_inc_ver
                               chk_get_ver
                               unique_ver ${1} ${VER}
                               ;;
                           q|quit)    # Exit with advice msg
                               echo -e "\n${bold}QUITTING${normal}"
                               echo -e "\nAmend the version number in the file ${bold}${VER_FILE}${normal} in the format ${bold}--label Version=\"vnnnn\"${normal}"
                               echo -e "\nIncrement the version to the next number.\n"
                               echo -e "\nE.G. ${bold}--label Version=\"v0104\"${normal} becomes ${bold}--label Version=\"v0105\"${normal}\n\n"
                               exit
                               ;;
                           *)         # Catch all: If we get here incorrect option has been supplied - try again
                               unique_ver ${1} ${2}
                       esac
               fi
           done
       else
           echo -e "\n*** This will be a new version: $1:$2  ***\n"
    fi
}

#~# Function to auto increment the version number
function auto_inc_ver ()
{
    # VER_FILE="./includes/LABELS"
    # Read entire file into an array so we can play with original
    readarray -t LABELS_FILE < ${VER_FILE}

    #~# Get Version No. & strip 'v' and quotes
    #~# TODO We should be able to do an inline replacement but couldn't get the count to increment
    count=$( awk -F'Version=' '{print$2}' ${VER_FILE} | sed 's/v\|"//g')

    ## This line is a working sed cmd that works with/without quotes to produce Ver_No.
    ## basis of the inline replacement
    #sed -r 's:(--label Version=)(")*(v)([0-9][0-9]*):\1\2\3(\4):' testtext

    #~# Remove old labels file and create empty replacement
    #~# TODO Change this to happen only after successful creation of new parameters
    # won't be required if we get inline replacement working
    rm -f ${VER_FILE}; touch ${VER_FILE}

    for LINE in "${LABELS_FILE[@]}"
    do
        if [[ $( echo ${LINE} | egrep "label Version" ) ]]; then
            # Add new version No. to new ${VER_FILE}
            # The 10# removes leading zeros by converting to base 10
            printf "%s%04d\"\n" "--label Version=\"v" "$((10#$count+1))" >> ${VER_FILE}
        else
            # Otherwise just copy verbaitum the line to new ${VER_FILE}
            echo -e "${LINE}" >> ${VER_FILE}
        fi
    done
}

#~# Stop a running container
# This is used for rapid testing of new images
function stop_container ()
{
    # $1 is the container name ${CNAME}
    # Check we have at least one parameter
    chk_params 1 ${1}

    if [[ $(docker ps -f name="${1}" --format "{{.ID}}") ]] ;
        then
            echo -e "\n*** Stopping old ${1} ***\n"
            docker stop $(docker ps -f name="${1}" --format "{{.ID}}") ;
        else
            echo "No container to stop" ;
    fi
}

#~# Remove old container
#~# TODO : Need to ask user if they really mean this
function rm_container ()
{
    # $1 is the container name ${CNAME}
    # Check we have at least one parameter
    chk_params 1 ${1}

    if [[ $(docker ps -a -f name="${1}" --format "{{.ID}}") ]] ;
        then
            echo -e "\n*** Removing old ${1} ***\n"
            docker rm $(docker ps -a -f name="${1}" --format "{{.ID}}") ;
        else
            echo "No container to remove" ;
    fi
}

#~# Stop a running container referenced by ID
# This is used for rapid testing of new images
function stop_container_by_id ()
{
    # $1 is the container name ${CNAME}
    # Check we have at least one parameter
    chk_params 1 ${1}

    if [[ $(docker ps -f id="${1}" --format "{{.ID}}") ]] ;
        then
            echo -e "\n*** Stopping old ${1} ***\n"
            docker stop $(docker ps -f id="${1}" --format "{{.ID}}") ;
        else
            echo "No container to stop" ;
    fi
}

#~# Remove old container referenced by ID
#~# TODO : Need to ask user if they really mean this
function rm_container_by_id ()
{
    # $1 is the container name ${CNAME}
    # Check we have at least one parameter
    chk_params 1 ${1}

    if [[ $(docker ps -a -f id="${1}" --format "{{.ID}}") ]] ;
        then
            echo -e "\n*** Removing old ${1} ***\n"
            docker rm $(docker ps -a -f id="${1}" --format "{{.ID}}") ;
        else
            echo "No container to remove" ;
    fi
}

#~# Stop & Remove old container referenced by ID
function stop_rm_container_by_id ()
{
    stop_container_by_id ${1}
    rm_container_by_id ${1}
}

#~# Publish container build instructions
function con_build_ins ()
{
    # $1 in the image name ${INAME}
    # $2 is the VERsion ${VER}
    # Check we have at least two parameters
    chk_params_2 ${1} ${2} ${3}

    echo -e "\nTo check operation, create container using:"
    echo -e "\n\t${bold}docker run -dit -P --name=${3} --hostname=${3} ${1}:${2}${normal}"
    echo -e "\nAnd then exec into the container using:"
    echo -e "\n\t${bold}docker exec -it ${3} bash${normal}\n"
}

#~# Publish additional usage instructions
function con_use_ins ()
{
    echo -e "\nTo get the port(s) that the container is listening on run:"
    echo -e "\n\t${bold}docker ps${normal}"
    echo -e "\nExample output:"
    echo -e "\nCONTAINER ID  IMAGE              COMMAND             CREATED        STATUS         PORTS                   NAMES"
    echo -e "\n8c82a9287b23  qmul/ssh:centos6   /usr/sbin/sshd -D   4 seconds ago  Up 2 seconds   0.0.0.0:49154->22/tcp   mad_mccarthy\n\n"
}
