#!/bin/bash

#~# A collection of functions used in the Docker build & run scripts

bold=$(tput bold)
normal=$(tput sgr0)
#Usage: echo -e "\n${bold}### Text to print bold ###${normal}"



#~# Function to check we have one parameter passed to the function
#~# TODO change this to a generic function to check any number of parameters
function chk_params_1 ()
{
    if [[ -z $1 ]]
        then
            echo -e "\n*** Coding error - Incorrect or no parameters supplied - can't continue ***\n"
            exit
    fi
}

#~# Function to check we have two parameters passed to the function
#~# TODO change this to a generic function to check any number of parameters
function chk_params_2 ()
{
    if [[ -z $1 ]] || [[ -z $2 ]]
        then
            echo -e "\n*** Coding error - Incorrect or no parameters supplied - can't continue ***\n"
            exit
    fi
}

#~# Read in parameters from a configuration file $1 in the ./includes directory
function read_params ()
{
    # Check we have at least one parameter
    chk_params_1 ${1}

    while IFS='' read -r LINE || [[ -n "$LINE" ]]; do
        RUN_OPTS="${RUN_OPTS} ${LINE}"
    done < ./includes/$1
}

#~# Function to check for the existence of a VERSION file and obtain the valid VER number
#~# TODO: Modify function to use only one error message
function chk_get_ver ()
{
    VER_FILE="includes/LABELS"

    if [[ ! -s ${VER_FILE} ]]
        then
            echo -e "\n*1* ERROR: No VERSION No. and/or ${VER_FILE} file exists ***"
            echo -e "\nPlease create a file called ${VER_FILE} in the same directory as the Dockerfile"
            echo -e "\nAnd add the version number to the file in the format  --label version=\"vn.n\""
            echo -e "\nwhere n.n is the major and minor version numbers E.G. v1.6\n\n"
            exit
    fi
    while IFS='' read -r LINE || [[ -n "$LINE" ]]; do
        if [[ $( echo ${LINE} | egrep "label version" ) ]]
            then
                VER=$( echo ${LINE}|cut -d "\"" -f 2 )
        fi
    done < ${VER_FILE}

    if [[ -z ${VER} ]]
        then
            echo -e "\n*2* ERROR: No VERSION No. and/or ${VER_FILE} file exists ***"
            echo -e "\nPlease create a file called ${VER_FILE} in the same directory as the Dockerfile"
            echo -e "\nAnd add the version number to the file in the format  --label version=\"vn.n\""
            echo -e "\nwhere n.n is the major and minor version numbers E.G. v1.6\n\n"
            exit
    fi
}

#~# Function to check that the supplied VER number is unique
function unique_ver ()
{
    #    if [ $(docker inspect --format {{.RepoTags}} $1:$2 2>/dev/null | sed 's/]//g'|cut -d ":" -f 2) ] ## DOCKER 1.9 ONLY!!
    # $1 in the image name ${INAME}
    # $2 is the VERsion ${VER}
    # Check we have at least two parameters
    chk_params_2 ${1} ${2}

    if [[ $( docker images | egrep $1 | awk '{ print $2; }' ) ]]
       then
           echo -e "\n Parameters: ${1} ${2}\n"
           # The space after ${1} is required to prevent picking supersets of the name
           ver_array=$(docker images | egrep "${1} " | awk '{ print $2; }')

           for new_ver in ${ver_array[@]}; do
               # echo -e "\nNew Var: ${new_var} : ${2}"
               if [[ $new_ver == $2 ]]
                   then
                       echo -e "\n*** ${new_ver} already exists ***"
                       echo -e "\nAmend the version number in the VERSION file using the format vn.n"
                       echo -e "\nwhere n.n is the major and minor version numbers E.G. v1.6\n\n"
                       exit
               fi
           done
       else
           echo -e "\n*** This will be a new version: $1:$2  ***\n"
    fi
}

#~# Stop a running container
# This is used for rapid testing of new images
function stop_container ()
{
    # $1 is the container name ${CNAME}
    # Check we have at least one parameter
    chk_params_1 ${1}

    if [[ $(docker ps -f name="${1}" --format "{{.ID}}") ]] ;
        then
            echo -e "\n*** Stopping old ${1} ***\n"
            docker stop $(docker ps -f name="${1}" --format "{{.ID}}") ;
        else
            echo "No container to stop" ;
    fi
}

#~# Remove old container
#~# TODO : Need to ask user if they really mean this
function rm_container ()
{
    # $1 is the container name ${CNAME}
    # Check we have at least one parameter
    chk_params_1 ${1}

    if [[ $(docker ps -a -f name="${1}" --format "{{.ID}}") ]] ;
        then
            echo -e "\n*** Removing old ${1} ***\n"
            docker rm $(docker ps -a -f name="${1}" --format "{{.ID}}") ;
        else
            echo "No container to remove" ;
    fi
}

#~# Stop a running container referenced by ID
# This is used for rapid testing of new images
function stop_container_by_id ()
{
    # $1 is the container name ${CNAME}
    # Check we have at least one parameter
    chk_params_1 ${1}

    if [[ $(docker ps -f id="${1}" --format "{{.ID}}") ]] ;
        then
            echo -e "\n*** Stopping old ${1} ***\n"
            docker stop $(docker ps -f id="${1}" --format "{{.ID}}") ;
        else
            echo "No container to stop" ;
    fi
}

#~# Remove old container referenced by ID
#~# TODO : Need to ask user if they really mean this
function rm_container_by_id ()
{
    # $1 is the container name ${CNAME}
    # Check we have at least one parameter
    chk_params_1 ${1}

    if [[ $(docker ps -a -f id="${1}" --format "{{.ID}}") ]] ;
        then
            echo -e "\n*** Removing old ${1} ***\n"
            docker rm $(docker ps -a -f id="${1}" --format "{{.ID}}") ;
        else
            echo "No container to remove" ;
    fi
}

#~# Stop & Remove old container referenced by ID
function stop_rm_container_by_id ()
{
    stop_container_by_id ${1}
    rm_container_by_id ${1}
}

#~# Publish container build instructions
function con_build_ins ()
{
    # $1 in the image name ${INAME}
    # $2 is the VERsion ${VER}
    # Check we have at least two parameters
    chk_params_2 ${1} ${2} ${3}

    echo -e "\nTo check operation, create container using:"
    echo -e "\n    docker run -dit -P --name=${3} --hostname=${3} ${1}:${2}"
    echo -e "\nAnd then exec into the container using:"
    echo -e "\n    docker exec -it ${3} bash\n"
}

#~# Publish additional usage instructions
function con_use_ins ()
{
    echo -e "\nTo get the port that the container is listening on run:"
    echo -e "\n    docker ps"
    echo -e "\nExample output:"
    echo -e "\nCONTAINER ID  IMAGE              COMMAND             CREATED        STATUS         PORTS                   NAMES"
    echo -e "\n8c82a9287b23  qmul/ssh:centos6   /usr/sbin/sshd -D   4 seconds ago  Up 2 seconds   0.0.0.0:49154->22/tcp   mad_mccarthy\n\n"
}

